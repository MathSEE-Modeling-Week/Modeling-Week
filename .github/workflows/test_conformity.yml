name: Run Jupyter Notebooks Conformity

on: [push, pull_request]

jobs:
  execute-notebooks:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install papermill jupyter numpy matplotlib scipy pytest umbridge

    - name: Test Notebooks with like Docker
      run: |
        exit_code=0
        summary=""
        export MODEL_URL="http://0.0.0.0:4243"
        export INPUT_VALUE="0.1"
        script_path="test/test_notebooks.py"

        # Make sure globstar is enabled
        shopt -s globstar
        for notebook in test_client/*.ipynb; do # Whitespace-safe and recursive
            echo "======================"
            echo "Running $notebook:"
            echo ""

            # Run the notebook in the background
            #papermill --progress-bar --cwd "$(dirname "$notebook")" "$notebook" "$notebook"_output.ipynb > /dev/null &
            #notebook_pid=$!


            # Convert notebook to script
            jupyter nbconvert --to script "$notebook"
            notebook_script="${notebook%.ipynb}.py"
            

            # Run the notebook script in the background
            python "$notebook_script" > /dev/null &
            notebook_pid=$!
            echo "Notebook script PID: $notebook_pid"
            

            echo "Waiting for model server to respond at $host:$port..."
            while ! curl -s "http://0.0.0.0:4243/Info" > /dev/null; do
              sleep 1
            done
            echo "Model server responded"
            

            # Run the .py script
            docker run -it --network=host -e model_host=http://localhost:4243 linusseelinger/testing-protocol-conformity-current
            #pytest -v $script_path --model_url=${MODEL_URL} --input_value=${INPUT_VALUE}
            #python $script_path
            script_exit_code=$?
            echo "Script exit code: $script_exit_code"



            echo ""

            if [ $script_exit_code -eq 0 ]; then
              echo "$script_path completed successfully."
              summary="$summary\nNotebook $notebook successful"
              echo "Das ist der exit code: $exit_code"
            else
              echo "Error: $script_path failed with exit code $script_exit_code."
              summary="$summary\nNotebook $notebook FAILED!"
              echo "Das ist der exit code: $exit_code"
            fi

            # Terminate the notebook process
            #kill -SIGTERM $notebook_pid
            #wait $notebook_pid 2>/dev/null
            #echo "Notebook $notebook terminated successfully."


            # Terminate the notebook process
            if kill -0 $notebook_pid 2>/dev/null; then
              echo "Terminating notebook process with PID $notebook_pid"
              kill $notebook_pid
              wait $notebook_pid
              echo "Notebook process terminated."
            else
              echo "Notebook process already terminated."
            fi


            exit_code=$(($exit_code + $script_exit_code)) # Simply add exit codes; will be zero if all tests successful
            echo "Das ist der exit code: $exit_code"
        done

        echo "======================"
        echo -e $summary
        echo ""

        if [ $exit_code -eq 0 ]; then
            echo "All notebooks successful."
        else
            echo "Some notebooks FAILED!"
        fi

        exit $exit_code
